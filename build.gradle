buildscript {
    repositories {
        mavenCentral()
        maven { url = "https://jitpack.io" }
        maven { url = "https://maven.minecraftforge.net/" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "com.github.GregTechCE:ForgeGradle:FG_2.3-SNAPSHOT"
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'

group = "com.mc-complex.morefurnaces"
version = getRewrittenVersion()
archivesBaseName = project_artifact_name

sourceCompatibility = 1.8
targetCompatibility = 1.8

minecraft {
    version = "1.12.2-14.23.5.2847"
    runDir = "run"
    mappings = "stable_39"
    makeObfSourceJar = false

    replace "GRADLE:VERSION", project.version
    replace "GRADLE:MODNAME", project_fancy_name
}

jar {
    version = "${project.minecraft.version}-${project.version}"
}

repositories {
    maven {
        name = "JEI Maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = "TOP Maven"
        url = "http://maven.tterrag.com"
    }
}

dependencies {
    testCompile 'junit:junit:4.5'
    runtime "mezz.jei:jei_1.12.2:4.15.0.293"
    runtime "mcjty.theoneprobe:TheOneProbe-1.12:1.12-1.4.23-16"
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

/*
    Fetches the last tag associated with the current branch.
 */
def getLastTag() {
    return run("git describe --abbrev=0 --tags " +
        (System.env["TRAVIS_TAG"] ? run("git rev-list --tags --skip=1 --max-count=1") : "")
    )
}

/*
    Runs a command and returns the output.
 */
def run(command) {
    def process = command.execute()
    def outputStream = new StringBuffer();
    def errorStream = new StringBuffer();
    process.waitForProcessOutput(outputStream, errorStream)

    errorStream.toString().with {
        if (it) {
            throw new GradleException("Error executing ${command}:\n> ${it}")
        }
    }
    
    return outputStream.toString().trim()
}

/*
    Rewrites the version.
 */
def getRewrittenVersion () {
    def lastTag = getLastTag()

    if (System.env['TRAVIS_TAG']) {
        return System.env['TRAVIS_TAG']
    } else {
        def commitNo = run "git rev-list ${lastTag}..HEAD --count"

        return lastTag + "." + commitNo
    }
}

task generateChangelog {
    onlyIf {
        System.env['TRAVIS']
    }

    doLast {
        /*
            Create a comprehensive changelog.
         */
        def lastTag = getLastTag()
        
        def changelog = (run([
            "git"
            , "log"
            , "--date=format:%d %b %Y"
            , "--pretty=%s - **%an** (%ad)"
            , "${lastTag}..HEAD"
        ].plus(
            /*
                Collect relevant directories only, them being:
                * ./src/main/java
                * ./src/main/resources
             */
            sourceSets.main.java.srcDirs
                .plus(sourceSets.main.resources.srcDirs)
                .collect { [ "--", it ] }
        ).flatten()))
        
        if (changelog) {
            changelog = "Changes since ${lastTag}:\n${("\n" + changelog).replaceAll("\n", "\n* ")}"
        }

        def f = new File("build/tmp/changelog.md")
        f.write(changelog ?: "", "UTF-8")
    }
}

compileJava.dependsOn generateChangelog
